// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Teacher.proto

#ifndef PROTOBUF_Teacher_2eproto__INCLUDED
#define PROTOBUF_Teacher_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Teacher_2eproto();
void protobuf_AssignDesc_Teacher_2eproto();
void protobuf_ShutdownFile_Teacher_2eproto();

class Chinese;
class Teacher;

// ===================================================================

class Chinese : public ::google::protobuf::Message {
 public:
  Chinese();
  virtual ~Chinese();

  Chinese(const Chinese& from);

  inline Chinese& operator=(const Chinese& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chinese& default_instance();

  void Swap(Chinese* other);

  // implements Message ----------------------------------------------

  Chinese* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chinese& from);
  void MergeFrom(const Chinese& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 age = 1;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 1;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string career = 4;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 4;
  inline const ::std::string& career() const;
  inline void set_career(const ::std::string& value);
  inline void set_career(const char* value);
  inline void set_career(const char* value, size_t size);
  inline ::std::string* mutable_career();
  inline ::std::string* release_career();
  inline void set_allocated_career(::std::string* career);

  // @@protoc_insertion_point(class_scope:Chinese)
 private:
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_career();
  inline void clear_has_career();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::int32 id_;
  ::std::string* name_;
  ::std::string* career_;
  friend void  protobuf_AddDesc_Teacher_2eproto();
  friend void protobuf_AssignDesc_Teacher_2eproto();
  friend void protobuf_ShutdownFile_Teacher_2eproto();

  void InitAsDefaultInstance();
  static Chinese* default_instance_;
};
// -------------------------------------------------------------------

class Teacher : public ::google::protobuf::Message {
 public:
  Teacher();
  virtual ~Teacher();

  Teacher(const Teacher& from);

  inline Teacher& operator=(const Teacher& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Teacher& default_instance();

  void Swap(Teacher* other);

  // implements Message ----------------------------------------------

  Teacher* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Teacher& from);
  void MergeFrom(const Teacher& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional string hostname = 4;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 4;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional string lele_label = 5;
  inline bool has_lele_label() const;
  inline void clear_lele_label();
  static const int kLeleLabelFieldNumber = 5;
  inline const ::std::string& lele_label() const;
  inline void set_lele_label(const ::std::string& value);
  inline void set_lele_label(const char* value);
  inline void set_lele_label(const char* value, size_t size);
  inline ::std::string* mutable_lele_label();
  inline ::std::string* release_lele_label();
  inline void set_allocated_lele_label(::std::string* lele_label);

  // required .Chinese chinese = 6;
  inline bool has_chinese() const;
  inline void clear_chinese();
  static const int kChineseFieldNumber = 6;
  inline const ::Chinese& chinese() const;
  inline ::Chinese* mutable_chinese();
  inline ::Chinese* release_chinese();
  inline void set_allocated_chinese(::Chinese* chinese);

  // @@protoc_insertion_point(class_scope:Teacher)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_lele_label();
  inline void clear_has_lele_label();
  inline void set_has_chinese();
  inline void clear_has_chinese();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  ::std::string* hostname_;
  ::std::string* lele_label_;
  ::Chinese* chinese_;
  friend void  protobuf_AddDesc_Teacher_2eproto();
  friend void protobuf_AssignDesc_Teacher_2eproto();
  friend void protobuf_ShutdownFile_Teacher_2eproto();

  void InitAsDefaultInstance();
  static Teacher* default_instance_;
};
// ===================================================================


// ===================================================================

// Chinese

// required int32 age = 1;
inline bool Chinese::has_age() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chinese::set_has_age() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chinese::clear_has_age() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chinese::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 Chinese::age() const {
  // @@protoc_insertion_point(field_get:Chinese.age)
  return age_;
}
inline void Chinese::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:Chinese.age)
}

// required int32 id = 2;
inline bool Chinese::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chinese::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chinese::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chinese::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Chinese::id() const {
  // @@protoc_insertion_point(field_get:Chinese.id)
  return id_;
}
inline void Chinese::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Chinese.id)
}

// required string name = 3;
inline bool Chinese::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chinese::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chinese::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chinese::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Chinese::name() const {
  // @@protoc_insertion_point(field_get:Chinese.name)
  return *name_;
}
inline void Chinese::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Chinese.name)
}
inline void Chinese::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Chinese.name)
}
inline void Chinese::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Chinese.name)
}
inline ::std::string* Chinese::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Chinese.name)
  return name_;
}
inline ::std::string* Chinese::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Chinese::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Chinese.name)
}

// optional string career = 4;
inline bool Chinese::has_career() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chinese::set_has_career() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chinese::clear_has_career() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chinese::clear_career() {
  if (career_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    career_->clear();
  }
  clear_has_career();
}
inline const ::std::string& Chinese::career() const {
  // @@protoc_insertion_point(field_get:Chinese.career)
  return *career_;
}
inline void Chinese::set_career(const ::std::string& value) {
  set_has_career();
  if (career_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    career_ = new ::std::string;
  }
  career_->assign(value);
  // @@protoc_insertion_point(field_set:Chinese.career)
}
inline void Chinese::set_career(const char* value) {
  set_has_career();
  if (career_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    career_ = new ::std::string;
  }
  career_->assign(value);
  // @@protoc_insertion_point(field_set_char:Chinese.career)
}
inline void Chinese::set_career(const char* value, size_t size) {
  set_has_career();
  if (career_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    career_ = new ::std::string;
  }
  career_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Chinese.career)
}
inline ::std::string* Chinese::mutable_career() {
  set_has_career();
  if (career_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    career_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Chinese.career)
  return career_;
}
inline ::std::string* Chinese::release_career() {
  clear_has_career();
  if (career_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = career_;
    career_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Chinese::set_allocated_career(::std::string* career) {
  if (career_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete career_;
  }
  if (career) {
    set_has_career();
    career_ = career;
  } else {
    clear_has_career();
    career_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Chinese.career)
}

// -------------------------------------------------------------------

// Teacher

// required string key = 1;
inline bool Teacher::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Teacher::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Teacher::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Teacher::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Teacher::key() const {
  // @@protoc_insertion_point(field_get:Teacher.key)
  return *key_;
}
inline void Teacher::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:Teacher.key)
}
inline void Teacher::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:Teacher.key)
}
inline void Teacher::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Teacher.key)
}
inline ::std::string* Teacher::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Teacher.key)
  return key_;
}
inline ::std::string* Teacher::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Teacher::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Teacher.key)
}

// required bytes value = 2;
inline bool Teacher::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Teacher::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Teacher::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Teacher::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Teacher::value() const {
  // @@protoc_insertion_point(field_get:Teacher.value)
  return *value_;
}
inline void Teacher::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:Teacher.value)
}
inline void Teacher::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:Teacher.value)
}
inline void Teacher::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Teacher.value)
}
inline ::std::string* Teacher::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Teacher.value)
  return value_;
}
inline ::std::string* Teacher::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Teacher::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Teacher.value)
}

// optional string hostname = 4;
inline bool Teacher::has_hostname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Teacher::set_has_hostname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Teacher::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Teacher::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& Teacher::hostname() const {
  // @@protoc_insertion_point(field_get:Teacher.hostname)
  return *hostname_;
}
inline void Teacher::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
  // @@protoc_insertion_point(field_set:Teacher.hostname)
}
inline void Teacher::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Teacher.hostname)
}
inline void Teacher::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Teacher.hostname)
}
inline ::std::string* Teacher::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Teacher.hostname)
  return hostname_;
}
inline ::std::string* Teacher::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Teacher::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Teacher.hostname)
}

// optional string lele_label = 5;
inline bool Teacher::has_lele_label() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Teacher::set_has_lele_label() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Teacher::clear_has_lele_label() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Teacher::clear_lele_label() {
  if (lele_label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lele_label_->clear();
  }
  clear_has_lele_label();
}
inline const ::std::string& Teacher::lele_label() const {
  // @@protoc_insertion_point(field_get:Teacher.lele_label)
  return *lele_label_;
}
inline void Teacher::set_lele_label(const ::std::string& value) {
  set_has_lele_label();
  if (lele_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lele_label_ = new ::std::string;
  }
  lele_label_->assign(value);
  // @@protoc_insertion_point(field_set:Teacher.lele_label)
}
inline void Teacher::set_lele_label(const char* value) {
  set_has_lele_label();
  if (lele_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lele_label_ = new ::std::string;
  }
  lele_label_->assign(value);
  // @@protoc_insertion_point(field_set_char:Teacher.lele_label)
}
inline void Teacher::set_lele_label(const char* value, size_t size) {
  set_has_lele_label();
  if (lele_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lele_label_ = new ::std::string;
  }
  lele_label_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Teacher.lele_label)
}
inline ::std::string* Teacher::mutable_lele_label() {
  set_has_lele_label();
  if (lele_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lele_label_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Teacher.lele_label)
  return lele_label_;
}
inline ::std::string* Teacher::release_lele_label() {
  clear_has_lele_label();
  if (lele_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lele_label_;
    lele_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Teacher::set_allocated_lele_label(::std::string* lele_label) {
  if (lele_label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lele_label_;
  }
  if (lele_label) {
    set_has_lele_label();
    lele_label_ = lele_label;
  } else {
    clear_has_lele_label();
    lele_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Teacher.lele_label)
}

// required .Chinese chinese = 6;
inline bool Teacher::has_chinese() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Teacher::set_has_chinese() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Teacher::clear_has_chinese() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Teacher::clear_chinese() {
  if (chinese_ != NULL) chinese_->::Chinese::Clear();
  clear_has_chinese();
}
inline const ::Chinese& Teacher::chinese() const {
  // @@protoc_insertion_point(field_get:Teacher.chinese)
  return chinese_ != NULL ? *chinese_ : *default_instance_->chinese_;
}
inline ::Chinese* Teacher::mutable_chinese() {
  set_has_chinese();
  if (chinese_ == NULL) chinese_ = new ::Chinese;
  // @@protoc_insertion_point(field_mutable:Teacher.chinese)
  return chinese_;
}
inline ::Chinese* Teacher::release_chinese() {
  clear_has_chinese();
  ::Chinese* temp = chinese_;
  chinese_ = NULL;
  return temp;
}
inline void Teacher::set_allocated_chinese(::Chinese* chinese) {
  delete chinese_;
  chinese_ = chinese;
  if (chinese) {
    set_has_chinese();
  } else {
    clear_has_chinese();
  }
  // @@protoc_insertion_point(field_set_allocated:Teacher.chinese)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Teacher_2eproto__INCLUDED
